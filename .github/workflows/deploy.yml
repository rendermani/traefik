name: Deploy Traefik

on:
  push:
    branches:
      - main        # Production
      - staging     # Staging
    paths:
      - 'traefik.nomad'
      - 'config/**'
      - 'scripts/**'
      - '.github/workflows/**'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        type: choice
        options:
          - check
          - install
          - upgrade
          - configure
          - backup
          - restart
          - deploy-nomad
        default: deploy-nomad
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
        default: staging

jobs:
  deploy-traefik:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Traefik repository
        uses: actions/checkout@v4
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          echo "üéØ Target environment: $(grep environment $GITHUB_OUTPUT | cut -d= -f2)"
      
      - name: Deploy Traefik via Nomad API with Vault
        if: github.event.inputs.action == 'deploy-nomad' || github.event.inputs.action == ''
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR || 'https://vault.cloudya.net' }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          echo "üöÄ Deploying Traefik via Vault-integrated Nomad API"
          
          # Install required tools
          echo "Installing required tools..."
          
          # Install Vault CLI
          curl -sL https://releases.hashicorp.com/vault/1.15.4/vault_1.15.4_linux_amd64.zip -o vault.zip
          unzip -q vault.zip
          chmod +x vault
          
          # Install Nomad CLI
          curl -sL https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip -o nomad.zip
          unzip -q nomad.zip
          chmod +x nomad
          
          # Check Vault connectivity
          echo "Checking Vault connectivity..."
          export VAULT_ADDR="${VAULT_ADDR}"
          export VAULT_TOKEN="${VAULT_TOKEN}"
          
          if ! ./vault status >/dev/null 2>&1; then
            echo "‚ö†Ô∏è WARNING: Cannot connect to Vault"
            echo "Falling back to GitHub secrets..."
            
            # Fallback to GitHub secrets if Vault is not available
            NOMAD_ADDR="${{ secrets.NOMAD_ADDR }}"
            NOMAD_TOKEN="${{ secrets.NOMAD_TOKEN }}"
          else
            echo "‚úÖ Vault is accessible"
            
            # Retrieve Nomad credentials from Vault
            echo "Retrieving Nomad credentials from Vault..."
            NOMAD_TOKEN=$(./vault kv get -field=token kv/data/traefik/nomad 2>/dev/null || echo "")
            NOMAD_ADDR=$(./vault kv get -field=addr kv/data/traefik/nomad 2>/dev/null || echo "https://nomad.cloudya.net")
            
            if [ -z "$NOMAD_TOKEN" ]; then
              echo "‚ö†Ô∏è No Nomad token found in Vault"
              echo "Attempting to use GitHub secret..."
              NOMAD_TOKEN="${{ secrets.NOMAD_TOKEN }}"
            else
              echo "‚úÖ Retrieved Nomad credentials from Vault"
            fi
          fi
          
          # Check if we have valid credentials
          if [ -z "$NOMAD_TOKEN" ] || [[ "$NOMAD_TOKEN" == *"PLACEHOLDER"* ]]; then
            echo "‚ùå No valid Nomad token available"
            echo ""
            echo "Please either:"
            echo "1. Store token in Vault at kv/data/traefik/nomad"
            echo "2. Set NOMAD_TOKEN secret in GitHub"
            echo ""
            echo "To create a Nomad token:"
            echo "  nomad acl token create -type=\"management\" -name=\"github-actions\" -global"
            exit 0  # Exit gracefully
          fi
          
          # Check if traefik.nomad exists
          if [ ! -f "traefik.nomad" ]; then
            echo "‚ùå traefik.nomad file not found!"
            exit 1
          fi
          
          # Convert HCL to JSON
          echo "Converting HCL to JSON..."
          ./nomad job run -output traefik.nomad > traefik.json || {
            echo "‚ùå Failed to convert HCL to JSON"
            exit 1
          }
          
          echo "JSON file created ($(wc -c < traefik.json) bytes)"
          
          # Submit job via Nomad API
          echo "Submitting job to Nomad at ${NOMAD_ADDR}..."
          
          RESPONSE=$(curl -X POST \
            -H "X-Nomad-Token: ${NOMAD_TOKEN}" \
            -H "Content-Type: application/json" \
            -d @traefik.json \
            "${NOMAD_ADDR}/v1/jobs" \
            -w "\n%{http_code}" -s)
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          echo "HTTP Response Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Job submitted successfully"
            EVAL_ID=$(echo "$BODY" | jq -r .EvalID 2>/dev/null || echo "N/A")
            echo "Evaluation ID: $EVAL_ID"
            
            # Monitor deployment
            echo "Waiting for deployment to stabilize..."
            sleep 15
            
            # Check job status
            JOB_STATUS=$(curl -s -H "X-Nomad-Token: ${NOMAD_TOKEN}" \
              "${NOMAD_ADDR}/v1/job/traefik" | jq -r '.Status' 2>/dev/null || echo "unknown")
            
            echo "Job Status: $JOB_STATUS"
          else
            echo "‚ùå Failed to submit job. HTTP Code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
      
      - name: Deploy Traefik (Legacy)
        if: github.event.inputs.action != 'deploy-nomad' && github.event.inputs.action != ''
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          ACTION: ${{ github.event.inputs.action }}
          DOMAIN: ${{ steps.env.outputs.environment == 'production' && 'cloudya.net' || 'staging.cloudya.net' }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
        run: |
          echo "üöÄ Deploying Traefik to ${{ steps.env.outputs.environment }}"
          echo "üì¶ Action: ${ACTION}"
          echo "üåê Domain: ${DOMAIN}"
          
          # Copy deployment script and configurations
          scp -o StrictHostKeyChecking=no \
            scripts/deploy-traefik.sh \
            root@${SERVER_IP}:/tmp/
          
          # Copy configuration files if they exist
          if [ -d "config" ]; then
            scp -r -o StrictHostKeyChecking=no \
              config/ \
              root@${SERVER_IP}:/tmp/traefik-config/
          fi
          
          # Execute deployment
          ssh -o StrictHostKeyChecking=no root@${SERVER_IP} << 'EOF'
            set -e
            
            # Make script executable
            chmod +x /tmp/deploy-traefik.sh
            
            # Run deployment
            /tmp/deploy-traefik.sh \
              --environment "${{ steps.env.outputs.environment }}" \
              --action "${ACTION}" \
              --domain "${DOMAIN}" \
              --email "${ACME_EMAIL}"
            
            # Clean up
            rm -f /tmp/deploy-traefik.sh
            rm -rf /tmp/traefik-config/
          EOF
      
      - name: Verify Traefik
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          DOMAIN: ${{ steps.env.outputs.environment == 'production' && 'cloudya.net' || 'staging.cloudya.net' }}
        run: |
          echo "üîç Verifying Traefik deployment..."
          
          # Check Traefik health
          if curl -f -s http://${SERVER_IP}/ping; then
            echo "‚úÖ Traefik ping endpoint is healthy"
          else
            echo "‚ùå Traefik ping check failed"
            exit 1
          fi
          
          # Check dashboard (should require auth)
          DASHBOARD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://traefik.${DOMAIN}/)
          if [ "$DASHBOARD_STATUS" = "401" ]; then
            echo "‚úÖ Dashboard requires authentication (expected)"
          else
            echo "‚ö†Ô∏è Dashboard returned status: $DASHBOARD_STATUS"
          fi
          
          # Check metrics endpoint
          if curl -f -s http://${SERVER_IP}:8082/metrics | head -n 5; then
            echo "‚úÖ Metrics endpoint is working"
          else
            echo "‚ö†Ô∏è Metrics endpoint not accessible"
          fi
          
          # List configured routes
          echo ""
          echo "üìã Checking service routes..."
          
          # Test service endpoints (should redirect to HTTPS)
          for SERVICE in vault nomad metrics grafana api app; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L http://${SERVICE}.${DOMAIN}/)
            echo "  - ${SERVICE}.${DOMAIN}: HTTP $STATUS"
          done
      
      - name: SSL Certificate Check with OpenSSL
        if: github.event.inputs.action != 'backup'
        env:
          DOMAIN: ${{ steps.env.outputs.environment == 'production' && 'cloudya.net' || 'staging.cloudya.net' }}
        run: |
          echo "üîê Testing SSL certificates with OpenSSL..."
          echo "============================================"
          
          FAIL_COUNT=0
          SUCCESS_COUNT=0
          
          # Test each domain
          for SERVICE in traefik vault nomad metrics grafana api app; do
            FULL_DOMAIN="${SERVICE}.${DOMAIN}"
            echo ""
            echo "Testing: $FULL_DOMAIN"
            
            # Test with OpenSSL
            CERT_INFO=$(echo | timeout 10 openssl s_client -connect "${FULL_DOMAIN}:443" -servername "${FULL_DOMAIN}" 2>/dev/null)
            
            if [ $? -eq 0 ]; then
              # Get issuer
              ISSUER=$(echo "$CERT_INFO" | openssl x509 -noout -issuer 2>/dev/null)
              
              # Check for Let's Encrypt
              if echo "$ISSUER" | grep -qi "let's encrypt\|ISRG\|R[0-9]"; then
                echo "  ‚úÖ Let's Encrypt certificate detected"
                echo "  Issuer: $ISSUER"
                ((SUCCESS_COUNT++))
                
              # Check for default certificate
              elif echo "$ISSUER" | grep -qi "traefik\|default"; then
                echo "  ‚ùå DEFAULT CERTIFICATE DETECTED!"
                echo "  Issuer: $ISSUER"
                echo "  ERROR: This domain has a Traefik default certificate"
                ((FAIL_COUNT++))
                
              else
                echo "  ‚ö†Ô∏è Unknown certificate issuer"
                echo "  Issuer: $ISSUER"
              fi
              
              # Check expiry
              EXPIRY=$(echo "$CERT_INFO" | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
              echo "  Expires: $EXPIRY"
              
              # Test HTTPS status
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${FULL_DOMAIN}/")
              echo "  HTTP Status: $STATUS"
              
            else
              echo "  ‚ö†Ô∏è SSL connection failed (certificate may be pending)"
            fi
          done
          
          echo ""
          echo "============================================"
          echo "Summary:"
          echo "  Success: $SUCCESS_COUNT domains with Let's Encrypt"
          echo "  Failed: $FAIL_COUNT domains with issues"
          
          if [ $FAIL_COUNT -gt 0 ]; then
            echo ""
            echo "‚ùå FAILURE: Found default certificates or SSL issues!"
            exit 1
          elif [ $SUCCESS_COUNT -eq 0 ]; then
            echo ""
            echo "‚ö†Ô∏è WARNING: No Let's Encrypt certificates detected yet"
            echo "Certificates may still be generating. Check again in a few minutes."
          else
            echo ""
            echo "‚úÖ SUCCESS: SSL certificates are properly configured!"
          fi
          
          # Give Let's Encrypt time to provision if this is a new install
          if [[ "${{ github.event.inputs.action }}" == "install" ]]; then
            echo ""
            echo "‚è≥ Waiting for Let's Encrypt certificate provisioning..."
            sleep 30
            
            # Recheck
            check_ssl "traefik.${DOMAIN}"
          fi
      
      - name: Summary
        if: success()
        env:
          DOMAIN: ${{ steps.env.outputs.environment == 'production' && 'cloudya.net' || 'staging.cloudya.net' }}
        run: |
          echo "## üéâ Traefik Deployment Successful!"
          echo ""
          echo "### üìä Deployment Details"
          echo "- **Environment:** ${{ steps.env.outputs.environment }}"
          echo "- **Action:** ${{ github.event.inputs.action || 'install' }}"
          echo "- **Domain:** ${DOMAIN}"
          echo ""
          echo "### üîó Access Points"
          echo "- **Dashboard:** https://traefik.${DOMAIN}"
          echo "- **Metrics:** http://${{ secrets.SERVER_IP }}:8082/metrics"
          echo ""
          echo "### üìù Next Steps"
          echo "1. Check dashboard credentials in server: \`/root/traefik-credentials.txt\`"
          echo "2. Verify SSL certificates are provisioned"
          echo "3. Test service routing"
          echo "4. Monitor access logs"